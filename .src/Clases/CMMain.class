' Gambas class file

'
' Authors:
'  J. Francisco Facundo <sos.sempai@gmail.com>
'
' This program is free software; you can redistribute it and/or modify it under
' the terms of the GNU General Public License as published by the Free Software
' Foundation; version 3.
'
' This program is distributed in the hope that it will be useful, but WITHOUT
' ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
' FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
' details.
'
' You should have received a copy of the GNU General Public License along with
' this program; if not, write to the Free Software Foundation, Inc.,
' 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

Inherits Panel

Event ForwardKey
Event BackwardKey

Private DataControl As New CData
Private CoverAlbum As New Object[]
Private Cover As CAlbum
Private CoverDefault As String
Private CoverList As CAlbum
Private Playlist As New CPlaylist
Private CSongList As Panel
Private Song As TextLabel
Private SongList As New Object[]
Private BackImage As PictureBox
Private Navigator As CKey
Private Navigators As New Object[]
Private NumAlbum As Integer
Private TotalAlbums As Integer
Private $hResult As Result
Private hSkinPath As String
Private hSkinTheme As Settings
Private SelectAlbum As String
Private SelectGenero As String

Property Skm_Modo As String ''Establece la cadena para identificar el modo de visualización del objeto. (Musica, Video, Karaoke)
Property NumberPos As Integer ''Establece o retorna el número del album que se usará como índice.


Public Sub _new()
  
  Dim i As Short
  'Leer configuracion del tema
  hSkinPath = DataControl.SkinPath & DataControl.SkinTheme
  hSkinTheme = New Settings(hSkinPath &/ "theme.conf")

  BackImage = New PictureBox(Me)
  With BackImage
    .X = 0
    .Y = 0
    .W = hSkinTheme["Window/W"]
    .H = hSkinTheme["Window/H"]
    .Stretch = True
    FMain.W = .W
    FMain.H = .H
  End With
  
  'Navigators
  For i = 0 To 2
    Navigator = New CKey(Me) As "Navigator"
    With Navigator
      .X = hSkinTheme["Navigator" & i & "/X"]
      .Y = hSkinTheme["Navigator" & i & "/Y"]
      .HKey = hSkinTheme["Navigator" & i & "/H"]
      .WKey = hSkinTheme["Navigator" & i & "/W"]
      .imgResPath = hSkinPath &/ hSkinTheme["Images/Nav" & i]
      .$idKey = "Nav" & i
      If i = 2 Then
        .Hide
      Else
        .MultiSend = DataControl.AutoScroll
      Endif
    End With
    Navigators.Add(Navigator)
  Next
  
  'Default cover picture
  CoverDefault = hSkinPath &/ hSkinTheme["Images/CoverDefault"]

  'Matriz de controles CoverAlbum
  For i = 1 To 10
    Cover = New CAlbum(Me) As "Cover"
    Cover.Cover = CoverDefault
    CoverAlbum.Add(Cover)
  Next
  
  'List view
  CoverList = New CAlbum(Me)
  CoverList.Visible = False

  CSongList = New Panel(Me)
  CSongList.Visible = False
  
  'Crea la lista de canciones, 30 etiquetas
  For i = 1 To 30
    Song = New TextLabel(CSongList) As "Song"
    With Song
      .Visible = False
      .Font.Name = hSkinTheme["SongList/Font"]
      .Font.Size = hSkinTheme["SongList/FontSize"]
      .Font.Bold = True
      .Foreground = CInt(hSkinTheme["SongList/Foreground"])
      .Wrap = True
      .Alignment = 0
      .Padding = 3
    End With
    
    SongList.Add(Song)
  Next

  LoadThemeConfiguration()
  
End

Private Sub HideAlbums()
  
  Dim i As Short
  'Ocultar las portadas de los albumnes.
  For i = 0 To 9
    CoverAlbum[i].Visible = False
  Next
  'Ocultar los navegadores
  For i = 0 To 1
    Navigators[i].Visible = False
  Next
  
End

Private Sub ShowAlbums()
  
  Dim i As Short
  
  ShowBackground("Background")
  
  'Mostrar los albumnes
  For i = 0 To 9
    CoverAlbum[i].Visible = True
  Next
  'Mostrar los navegadores
  For i = 0 To 1
    Navigators[i].Visible = True
  Next
  
End

Public Sub Cover_Click()
  
  ShowSelectAlbum
  
End

Public Sub Song_MouseDown()
  
  Dim sSong As New Song, hResult As Result, SongID, i, idPos, jmpPos As Integer
  
  hResult = DataControl.getDataAlbum(NumAlbum)
  With sSong
    .album = hResult["Album"]
    .genere = hResult["Genero"]
    .type = DataControl.Skm_Modo
  End With
  
  idPos = CInt(Right$(Left$(Last.Text, 3), 2))
  For i = 1 To 4
    Select idPos
      Case jmpPos + 1 To i * 25
        SongID = hResult["Songsid" & i]
        jmpPos = (i * 25) - 25
        Break
    End Select
  Next
  
  hResult = DataControl.getDataSongs(SongID)
  With sSong
    .id = hResult["id"]
    .idsong = idPos - jmpPos
    .name = hResult["N" & sSong.idsong]
  End With
  
  Playlist.addPlay(sSong)
  DataControl.setPlayHistory(NumAlbum)
  
End

Public Sub CancelSong()
  
  Playlist.CancelSong
  
End

Private Sub ShowSelectAlbum()
  
  Dim i, TotalSongs, ViewList As Short
  Dim SongID As Integer
  If Last.Number = "" Then Return
  NumAlbum = Last.Number
  Debug CInt(Last.number)
  ShowBackground("BGSelect")
  
  HideAlbums
  
  'Rellena la lista
  $hResult = DataControl.getDataAlbum(NumAlbum)
  TotalSongs = $hResult["Total_songs"]
  SelectAlbum = $hResult["Album"]
  SelectGenero = $hResult["Genero"]
  SongID = $hResult["Songsid1"]
  If $hResult["Cover_name"] = "0" Then 
    CoverList.Cover = CoverDefault
  Else
    CoverList.Cover = DataControl.getWorkDir() &/ SelectGenero &/ SelectAlbum &/ $hResult["Cover_name"]
  Endif
  $hResult = DataControl.getDataSongs(SongID)
  
  If TotalSongs > 30 Then
    ViewList = 30
  Else
    ViewList = TotalSongs
  Endif
  
  For i = 1 To ViewList
    If i < 10 Then
      SongList[i - 1].Text = "[0" & i & "] " & Left$($hResult["N" & i], -4)
    Else If i < 26 Then
      SongList[i - 1].Text = "[" & i & "] " & Left$($hResult["N" & i], -4)
    Else If i > 25 Then
      $hResult = DataControl.getDataSongs(SongID + 1)
      SongList[i - 1].Text = "[" & i & "] " & Left$($hResult["N" & (i - 25)], -4)
    Endif
    SongList[i - 1].Visible = True
  Next
  
  CoverList.Visible = True
  CSongList.Show
  Navigators[2].Show
  
End

Private Sub HideSelectAlbum()
  
  Dim i As Short
  
  ShowBackground("Background")
  ShowAlbums
  'Ocultar la lista
  For i = 0 To 29
    SongList[i].Visible = False
  Next
  CoverList.Visible = False
  ' ScrollList.Visible = False
  CSongList.Hide
  Navigators[2].Hide
  
End

Private Sub ShowBackground(type As String)
  
  Dim bgimage As String
  
  bgimage = hSkinTheme["Images/" & type]
  BackImage.Picture = Picture[hSkinPath &/ bgimage]

End

Private Sub LoadThemeConfiguration()
  
  Dim p, c, i, $H, $W As Short
  
  ShowBackground("Background")
  For i = 0 To 9
    With CoverAlbum[i]
      .SizeH = hSkinTheme["Album" & i & "/H", 180]
      .SizeW = hSkinTheme["Album" & i & "/W", 180]
      .XPos = hSkinTheme["Album" & i & "/X"]
      .YPos = hSkinTheme["Album" & i & "/Y"]
      .AlbumNameText.Font.Name = hSkinTheme["AlbumNameText/Font"]
      .AlbumNameText.Font.Size = hSkinTheme["AlbumNameText/FontSize"]
      .AlbumNameText.Foreground = hSkinTheme["AlbumNameText/Foreground"]
      .AlbumSongsText.Font.Size = hSkinTheme["AlbumNameText/FontSize"]
      .AlbumSongsText.Foreground = hSkinTheme["AlbumNameText/Foreground"]
      .AlbumNumText.Font.Name = hSkinTheme["AlbumNumText/Font"]
      .AlbumNumText.Font.Size = hSkinTheme["AlbumNumText/FontSize"]
      .AlbumNumText.Foreground = hSkinTheme["AlbumNumText/Foreground"]
    End With
  Next

'Ajustar la imagen del caratula en la lista de canciones
  With CoverList
    .XPos = hSkinTheme["CoverList/X"]
    .YPos = hSkinTheme["CoverList/Y"]
    .SizeH = hSkinTheme["CoverList/H"]
    .SizeW = hSkinTheme["CoverList/W"]
  End With
  
  'Panel para organizar la lista de canciones
  With CSongList
    .X = hSkinTheme["SongList/X"]
    .Y = hSkinTheme["SongList/Y"]
    .H = hSkinTheme["SongList/H"]
    .W = hSkinTheme["SongList/W"]
  End With
  
  $H = CInt(CSongList.H / 10)
  $W = CInt(CSongList.W / 3)
  
  'Ajustar lista de canciones
  For p = 0 To CSongList.W - $W Step $W
    For i = 0 To 9
      With SongList[c]
        .H = $H
        .W = $W
        .X = p
        .Y = $H * i
      End With
      Inc c
    Next
  Next
  
End

Private Function NumberPos_Read() As Integer

  Return NumAlbum

End

Private Sub NumberPos_Write(Value As Integer)

  Dim i As Integer
  NumAlbum = Value
  'Vaciar la caché de imagenes
  For i = 0 To 9
    CoverAlbum[i].ImgClear
  Next
  AlbumShow

End

Private Sub AlbumShow()
  
  Dim hResult As Result, i As Integer
  'Si llega al final de los albumnes hace el calculo de cuanto mostrar.
  For i = 0 To 9
    hResult = DataControl.getDataAlbums(NumAlbum + i)
    With CoverAlbum[i]
      If hResult.Available = True Then
        If hResult["Cover_name"] = "0" Then
          'Muestra imagen por defecto
          .cover = CoverDefault
        Else
          .Cover = DataControl.getWorkDir() &/ hResult["Genero"] &/ hResult["Album"] &/ hResult["Cover_name"]
        Endif
        .Title = hResult["Album"]
        .Songs = hResult["Total_songs"]
        .Number = Draw_Zeros(NumAlbum + i)
      Else
        .cover = "./resource/null.png"
        .Title = ""
        .Songs = "0"
        .Number = ""
      Endif
    End With

  Next
  
End

Private Sub Draw_Zeros(AlbumPos As Integer) As String
  
  Dim sString As String, $TotalAlbum As Integer
  '////////////// Acomodar ceros /////////////////
  $TotalAlbum = Len(CStr(TotalAlbums))
  '//////////Menos de 100 albumnes, Posicion es menor a 10 acomodo un 0 antes del digito.
  If $TotalAlbum = 2 And AlbumPos < 10 And TotalAlbums < 100 Then
    sString = "0" & AlbumPos
  '//////////Menos de 1000 albumnes, Posicion es menor a 10 acomodo 00 antes del digito.
  Else If $TotalAlbum = 3 And AlbumPos < 10 And TotalAlbums < 1000 Then
    sString = "00" & AlbumPos
  '//////////Menos de 1000 albumnes, Posicion es menor a 100 y mayor a 10 acomodo un 0 antes de los dos digitos.
  Else If $TotalAlbum = 3 And AlbumPos < 100 And AlbumPos < 1000 Then
    sString = "0" & AlbumPos
  '//////////Menos de 10000 albumnes, Posicion es menor a 10 acomodo 000 antes del digito.
  Else If $TotalAlbum = 4 And AlbumPos < 10 And AlbumPos < 10000 Then
    sString = "000" & AlbumPos
  '//////////Menos de 10000 albumnes, Posicion es menor a 100 acomodo 00 antes de los digitos.
  Else If $TotalAlbum = 4 And AlbumPos < 100 And AlbumPos < 10000 Then
    sString = "00" & AlbumPos
  '//////////Menos de 10000 albumnes, Posicion es menor a 1000 acomodo 0 antes de los tres digitos.
  Else If $TotalAlbum = 4 And AlbumPos < 1000 And AlbumPos < 10000 Then
    sString = "0" & AlbumPos
  '//////////Menos de 100000 albumnes, Posicion es menor a 10 acomodo 0000 antes del digito.
  Else If $TotalAlbum = 5 And AlbumPos < 10 And AlbumPos < 100000 Then
    sString = "0000" & AlbumPos
  '//////////Menos de 100000 albumnes, Posicion es menor a 100 acomodo 000 antes de los digitos.
  Else If $TotalAlbum = 5 And AlbumPos < 100 And AlbumPos < 100000 Then
    sString = "000" & AlbumPos
  '//////////Menos de 100000 albumnes, Posicion es menor a 1000 acomodo 00 antes de los tres digitos.
  Else If $TotalAlbum = 5 And AlbumPos < 1000 And AlbumPos < 100000 Then
    sString = "00" & AlbumPos
  '//////////Menos de 100000 albumnes, Posicion es menor a 10000 acomodo 0 antes de los cuatro digitos.
  Else If $TotalAlbum = 5 And AlbumPos < 10000 And AlbumPos < 100000 Then
    sString = "0" & AlbumPos
 '//////// De lo contrario, solo poner los digitos.
  Else
    sString = AlbumPos
  Endif

  Return sString
  
End

Private Function Skm_Modo_Read() As String

  Return DataControl.Skm_Modo

End

Private Sub Skm_Modo_Write(Value As String)

  DataControl.Skm_Modo = Value
  TotalAlbums = DataControl.getTotalAlbums()

End

Public Sub Navigator_PulseKey()
  
  Select Last.$idKey
    Case "Nav0"
      'Left
      Raise BackwardKey
    Case "Nav1"
      'Right
      Raise ForwardKey
    Case "Nav2"
      HideSelectAlbum
  End Select
  
End

