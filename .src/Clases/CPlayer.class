' Gambas class file

' Objeto CPlayer manejador de reproducción
' Autor:
'   José Francisco Facundo <sos.sempai@gmail.com>
' Licencia:
'   This program Is Free software; you can redistribute it And / Or modify it under
'   the terms Of the GNU General Public License As Published by the Free Software
'   Foundation; version 3.
' 
'  This program Is Distributed In the hope that it will be useful, but WITHOUT
'  ANY WARRANTY; without even the implied warranty Of MERCHANTABILITY Or FITNESS
'  For A PARTICULAR PURPOSE.See the GNU General Public License For more
'   details.
' 
'  You should have received a Copy Of the GNU General Public License along With
'  this program; If Not, Write To the Free Software Foundation, Inc.,
'  51 Franklin Street, Fifth Floor, Boston, MA 02110 - 1301 USA

Event ProcessEnd
Event MovieBoxVisible
Event MovieBoxHide
Event MovieBox_click
Event UploadFinish
Event UploadFailed

Private inst As Pointer
Private mp As Pointer
Private m As Pointer

Library "libvlc:5"

Private Enum libvlc_NothingSpecial = 0,
  libvlc_Opening,
  libvlc_Buffering,
  libvlc_Playing,
  libvlc_Paused,
  libvlc_Stopped,
  libvlc_Ended,
  libvlc_Error
  
Private Extern libvlc_new(argc As Integer, argv As String) As Pointer
Private Extern libvlc_media_new_path(p_instance As Pointer, path As String) As Pointer
Private Extern libvlc_media_player_new_from_media(p_md As Pointer) As Pointer
Private Extern libvlc_media_player_set_xwindow(p_mi As Pointer, drawable As Integer)
Private Extern libvlc_media_player_play(p_mi As Pointer) As Integer
Private Extern libvlc_media_player_stop(p_mi As Pointer)
' Private Extern libvlc_media_player_get_length(p_mi As Pointer, l_ex As Pointer) As Integer
' Private Extern libvlc_media_player_get_time(p_mi As Pointer) As Integer
Private Extern libvlc_media_player_get_state(p_mi As Pointer) As Integer
' Private Extern libvlc_media_player_release(p_mi As Pointer)
Private Extern libvlc_release(p_instance As Pointer)
' Private Extern libvlc_media_player_pause(p_mi As Pointer)
Private Extern exitus(status As Integer) In "libc:6" Exec "exit"


Property VisibleMovieBox As Boolean ''Habilita o deshabilita la visibilidad del MovieBox.
Property mpControl As Boolean ''Muestra el estado del timer.
Property upProcess As Boolean ''Muestra el estado del envio ftp.
Property ResProcess As Boolean ''Muestra si el servidor se encuentra en proceso de reinicio.
Property PlayProcess As Boolean ''Muestra el estado de la reproducción.

Private $PlayProcess As Boolean
Private $upProcess As Boolean
Private DataControl As New CData
Private RmtSender As CFtpSender
Private $hProcess As Process
Private $pMonitor As Timer
Private ReconSocket As Timer
Private ResCount As Timer
Private ResState As Boolean
Private $MovieBox As DrawingArea
Private $rPath As String
Private $rFile As String
Private $rType As String
Private $rCover As String
Private hSkinPath As String
Private hSkinTheme As Settings
Private fifofile As File
Private fifopath As String
Private socketpath As String
Private WaitFTP As Boolean
Private FileIgnore As Boolean
Private $mpv As Boolean
Private $vlc As Boolean

Public Sub _new()
  
  $pMonitor = New Timer As "$pMonitor"
  $pMonitor.Delay = 100
  
  ReconSocket = New Timer As "ReconSocket"
  ReconSocket.Delay = 120000
  ReconSocket.Start
  
  ResCount = New Timer As "ResCount"
  ResCount.Delay = 80000
  
  $MovieBox = New DrawingArea(FMain) As "$MovieBox"
  hSkinPath = DataControl.SkinPath & DataControl.SkinTheme
  hSkinTheme = New Settings(hSkinPath &/ "theme.conf")
  
  With $MovieBox
    .X = 0
    .Y = 0
    .H = hSkinTheme["Window/H"]
    .W = hSkinTheme["Window/W"]
    .Background = 0
    .Visible = False
  End With
  
  RmtSender = New CFtpSender As "RmtSender" 
  If DataControl.FtpEnable Then RmtSender.OpenConConnect
  '-----------Controlar MPlayer mediante fifo----------------
  ' Ruta del fifo
  fifopath = "/tmp/mplayerfifo"
  
  socketpath = "/tmp/mpvsocket"
  
  'Crear el fifo si no existe
  If Not Exist(fifopath) Then Exec ["mkfifo", fifopath] Wait
  
  'Abrir fifo de entrada para mplayer
  fifofile = Open fifopath For Write Append
  
  Shell "mpv --version" Wait
  
  Wait 1
  
End

Public Sub Play(FileName As String, Path As String, tSong As String, SendFile As Boolean, CoverName As String)
  Dim FilePath, CoverPath As String
  
  FilePath = Conv(Path &/ FileName, Desktop.Charset, System.Charset)
  
  If DataControl.FtpEnable Then
    
    'Reproducción remota en TVOUT
    'Hay que esperar el tiempo para subir el archivo
    
    HideMovieBox
    
    'El archivo no está en el servidor FTP
    WaitFTP = True
    
    $rPath = FilePath
    $rFile = FileName
    $rType = tSong
    If CoverName <> "0" Then
      $rCover = Left(FileName, -3) & Right(CoverName, 3)
    Else
      $rCover = CoverName
    Endif
    
    If SendFile = True Then
      
      Try RmtSender.OpenConConnect
      Wait 0.5
      If RmtSender.ConStatus = False Then
        Raise UploadFailed
        Goto recnormal
      Endif
      
      'Portada de album
      If CoverName <> "0" Then
        CoverPath = Conv(Path &/ CoverName, Desktop.Charset, System.Charset)
        FileIgnore = True
        UploadFile($rCover, CoverPath)
      Endif
      
      'Subir archivos
      UploadFile(FileName, FilePath)
      
    Else
      RmtSender_Send_Finish
    Endif
  Else
    recnormal:
    If tSong = "musica" Then
      PlayAudio(FilePath)
    Else
      PlayVideo(FilePath)
    Endif
  Endif
  
  Catch
    Debug Error.Text
  
End

Public Function UploadFile(FileName As String, FilePath As String) As Boolean
  
  $upProcess = True
  
  'Detectar si estamos tratando con un archivo CDG
  ' If Right(FileName, 3) = "cdg" Then
  '   cdgUpload = True
  '   UploadFile(Replace(FileName, ".cdg", ".mp3"), Replace(FilePath, ".cdg", ".mp3"))
  '   cdgUpload = False
  ' Endif
  
  RmtSender.SendFTPFile(FileName, FilePath)
  
  Return True
  
End

Public Sub DeleteFile()
  
  RmtSender.ConSendSocket("<DELETEFILE>")
  Wait 0.2
  
End

Private Sub PlayAudio(sFilePath As String)
  
  If Object.IsValid($hProcess) Then 
    If $hProcess.State = $hProcess.Running Then Return
  Endif
  $mpv = False
  $PlayProcess = True
  HideMovieBox
  $hProcess = Exec ["mplayer", "-vo", "null", "-input", "file=" & fifopath, "-really-quiet", sFilePath] For Read Write As "Process"
  ' $hProcess = Exec ["mpv", "--pause", "--vo=null", "--ao=alsa", "--input-ipc-server=" & socketpath, sFilePath] For Read Write As "Process"
  Wait 3
  If WaitFTP Then
    WaitFTP = False
    Wait 1
    RmtSender.ConSendSocket("<PAUSE>")
  Endif
  PlayerPause
  $pMonitor.Enabled = True
  
End

Private Sub PlayVideo(sFilePath As String)
  
  WaitFTP = False
  $PlayProcess = True
  If DataControl.VideoOut = True Then
    HideMovieBox
    $mpv = True
    $hProcess = Exec ["mpv", "--pause", "--ao=alsa", "--fs", "--input-ipc-server=" & socketpath, "--geometry=1280x720+801+350", sFilePath] For Read Write As "Process"
  Else
    If $MovieBox.Visible = False Then $MovieBox.Visible = True
    $mpv = False
    ' $hProcess = Exec ["mplayer", "-cache", "2048", "-ao", "alsa", "-vo", "x11", "-zoom", "-x", $MovieBox.W, "-y", $MovieBox.H, "-input", "file=" & fifopath, "-really-quiet", "-wid", $MovieBox.Handle, sFilePath] For Read Write As "Process"
    ' $MovieBox.Raise
    
    'libvlc5
    $vlc = True
    inst = libvlc_new(0, Null)
    
    m = libvlc_media_new_path(inst, sFilePath)
    mp = libvlc_media_player_new_from_media(m)
    libvlc_media_player_set_xwindow(mp, $MovieBox.Handle)
    libvlc_media_player_play(mp)
    
    Raise MovieBoxVisible
  Endif
  Wait 2.5
  If DataControl.FtpEnable = True Then
    Wait 1
    RmtSender.ConSendSocket("<PAUSE>")
  Endif
  PlayerPause
  $pMonitor.Enabled = True
  
End

Public Sub Process_Read()
  
  Dim sData As String
  sData = Read #Last, -250
  
End

Public Sub Process_Kill()
  
  $PlayProcess = False
  
End

Public Sub RmtSender_Send_Finish()
  
  If FileIgnore Then
    FileIgnore = False
    Return
  Endif
  Raise UploadFinish
  $upProcess = False
  If WaitFTP = False Then Return
  RmtSender.ConSendSocket($rFile)
  Wait 0.3
  If $rCover <> "0" Then
    RmtSender.ConSendSocket($rCover)
    Wait 0.3
  Endif
  If DataControl.VideoOut = True Then
    PlayVideo($rPath)
  Else
    PlayAudio($rPath)
  Endif
  
End

Public Sub RmtSender_Send_Error()
  
  If FileIgnore Then
    FileIgnore = False
    Return
  Endif
  Raise UploadFailed
  $upProcess = False
  'En caso de error, repoducir normalmente
  If WaitFTP = False Then Return
  ' WaitFTP = False
  RmtSender.ConSendSocket("<RESTART>")
  ' RmtSender.ConSendSocket("<RESTARTFTP>")
  ' RmtSender.ConSendSocket("<RESETNET>")
  
  ResCount.Start
  ResState = True
  
  If $rType = "Musica" Then
    PlayAudio($rPath)
  Else
    PlayVideo($rPath)
  Endif
  
End

Public Sub $pMonitor_Timer()
  
  If $vlc = False Then 
    
    If $hProcess.State = Process.Stopped And WaitFTP = False Then
      'Matar el proceso en el servidor
      RmtSender.ConSendSocket("<ENDFILE>")
      Wait 0.5
      'Dispara el evento
      Raise ProcessEnd
      
    Endif
    
  Else 
    
    If libvlc_media_player_get_state(mp) = libvlc_Ended Then 
      $vlc = False
      $pMonitor.Stop
      libvlc_media_player_stop(mp)
      libvlc_release(inst)
      Raise ProcessEnd
      Process_Kill
    Endif
    
  Endif 
  
End

Public Sub ReconSocket_Timer()
  
  If DataControl.FtpEnable = False Then Return
  If ResState = True Then Return
  If RmtSender.ConStatus = False Then 
    Try RmtSender.OpenConConnect
  Endif
  
  Catch
    Debug Error.Text
End

Public Sub PlayerStop()
  
  If $vlc = True And $PlayProcess = True Then 
    $vlc = False
    $pMonitor.Stop
    libvlc_media_player_stop(mp)
    libvlc_release(inst)
    Raise ProcessEnd
    Process_Kill
  Endif
  
  If Not $hProcess Then Return
  If Not $hProcess.State = Process.Running Then Return
  
  RmtSender.ConSendSocket("<CANCEL>")
  Wait 0.2
  If $mpv = True Then
    ' Print #fifofile, "stop"
    Shell "echo 'stop' | socat - " & socketpath
  Else
    Try Print #$hProcess, "q";
  Endif
  
  Catch
    Debug Error.Text
  
End

' Private Sub PlayerSeek()
'   
'   Print #fifofile, "seek -3 0"
'   
' End

Public Sub PlayerPause()
  
  ' Print #fifofile, "cycle pause"
  Debug
  ' Wait 0.5
  If $mpv Then Shell "echo 'cycle pause' | socat - " & socketpath
  
End

Private Function mpControl_Read() As Boolean
  
  Return $pMonitor.Enabled
  
End

Private Sub mpControl_Write(Value As Boolean)
  
  $pMonitor.Enabled = Value
  
End

Private Function VisibleMovieBox_Read() As Boolean

  Return $MovieBox.Visible

End

Private Sub VisibleMovieBox_Write(Value As Boolean)
  
  $MovieBox.Visible = Value
  
End

Private Sub HideMovieBox()
  
  If $MovieBox.Visible Then
    $MovieBox.Visible = False
    ' Raise MovieBox_click
    Raise MovieBoxHide
  Endif
  
End

Public Sub $MovieBox_MouseDown()
  
  Raise MovieBox_click
  
End

Private Function upProcess_Read() As Boolean
  
  Return $upProcess
  
End

Public Sub ResCount_Timer()
  
  ResCount.Stop
  ResState = False
  Debug "ResCount"
  
End

Private Sub upProcess_Write(Value As Boolean)
  
  Debug Value
  
End

Private Function ResProcess_Read() As Boolean

  Return ResState

End

Private Sub ResProcess_Write(Value As Boolean)

  ResState = Value

End

Private Function PlayProcess_Read() As Boolean

  Return $PlayProcess

End

Private Sub PlayProcess_Write(Value As Boolean)

  $PlayProcess = Value

End
