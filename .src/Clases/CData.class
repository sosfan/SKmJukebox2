' Gambas class file

'
' Authors:
'  J. Francisco Facundo <sos.sempai@gmail.com>
'
' This program is free software; you can redistribute it and/or modify it under
' the terms of the GNU General Public License as published by the Free Software
' Foundation; version 3.
'
' This program is distributed in the hope that it will be useful, but WITHOUT
' ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
' FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
' details.
'
' You should have received a copy of the GNU General Public License along with
' this program; if not, write to the Free Software Foundation, Inc.,
' 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

Property getConfigData As Result
Property MoneyValue As Integer
Property CreditValue As Integer
Property MasterVol As Integer
Property FullScreen As Boolean
Property ShowCursor As Boolean
Property ScreenSaver As Boolean
Property VideoOut As Boolean
Property AutoPlay As Boolean
Property AutoScroll As Boolean
Property MaxCreditKey As String
Property MinCreditKey As String
Property ConfigKey As String
Property CancelKey As String
Property MaxVolKey As String
Property MinVolKey As String
Property MusicDir As String
Property VideoDir As String
Property KaraokeDir As String
Property Total_credito As Integer
Property Credito As Integer
Property channels As Integer[]
Property Skm_Modo As String ''Establece o retorna el modo de busqueda.
Property DBPlayList As Song ''Establece o retorna un elemento a la PlayList en la base de datos.
Property SkinTheme As String ''Establece o retorna el nombre de piel seleccionada.
Property SkinPath As String ''Retorna el path de skins
Property FTPHost As String ''Retorna o establece la dirección del FTPServer cuando es usado para el envio de vídeos en TVOUT.
Property FTPUser As String ''Retorna o establece el usuario establecido para la conexión en el FTPServer.
Property FTPPassword As String '' Retorna o establece la contraseña para la conexión en el FTPerver.
Private sEncrypt As New EasyEncrypt
Private Modo As String
Private Total_Album As Integer
Private hConn As Connection

Private Function ConectarBase() As Boolean
  
  If hConn Then Return False
  hConn = New Connection
  hConn.Host = User.Home
  hConn.Name = "music_db.sqlite"
  hConn.Type = "sqlite3"
  Try hConn.Open
  If Error Then
    hConn = Null
    Message.Error("Error al conectar con la bd.")
    Return True
  Endif
  Catch
    Message.Error("Error desconocido al conectar con la bd.")
  Return False
  
End

Private Function CerrarConexion()
  
  If hConn = Null Then Return
  hConn.Close
  hConn = Null
  
End

Public Sub _new()
  
  If Not Exist(User.Home &/ "music_db.sqlite") Then
    MDatabase.CreateDatabase
    ConectarBase
    With MDatabase
      .ConfigCreateDatabaseTables(hConn)
      .EQCreateDatabaseTables(hConn)
      .MusicaCreateDatabaseTables(hConn)
      .VideoCreateDatabaseTables(hConn)
      .KaraokeCreateDatabaseTables(hConn)
      .MonederoCreateDatabaseTables(hConn)
      .PlayListCreateDatabaseTables(hConn)
    End With
    CerrarConexion
  Endif
  ConectarBase
  
  ' Canal y fuerza para el cifrado.
  With sEncrypt
    .Channel = 2
    .Strong = 1
  End With
  
  Catch
    Debug "Database error."
  
End

Public Sub UpMusicTb()
  
  If Exist(MusicDir_Read()) Then
    
    With hConn
      .Exec("drop table abc_data")
      .Exec("drop table album_id")
      .Exec("drop table mp3")
      .Exec("drop table mp3playhistory")
    End With
    
    MDatabase.MusicaCreateDatabaseTables(hConn)
    Exec ["skmdbmgr", "-musica"] Wait
    Last.Enabled = False
    
  Else
    
    Message.Error("\nLa ruta especificada de Música no existe, se ha movido o eliminado.\nEspecifique una nueva ruta.")
    
  Endif
  
End

Public Sub UpVideoTb()
  
  If Exist(VideoDir_Read()) Then
    
    With hConn
      .Exec("drop table video_abc_data")
      .Exec("drop table video_album_id")
      .Exec("drop table video")
      .Exec("drop table videoplayhistory")
    End With
    
    MDatabase.VideoCreateDatabaseTables(hConn)
    Exec ["skmdbmgr", "-video"] Wait
    Last.Enabled = False
    
  Else
    
    Message.Error("\nLa ruta especificada de vídeos no existe, se ha movido o eliminado.\nEspecifique una nueva ruta.")
    
  Endif
  
End

Public Sub UpKaraokeTb()

  If Exist(KaraokeDir_Read()) Then
    
  With hConn
      .Exec("drop table karaoke_abc_data")
      .Exec("drop table karaoke_album_id")
      .Exec("drop table karaoke")
      .Exec("drop table karaokeplayhistory")
    End With
    
    MDatabase.KaraokeCreateDatabaseTables(hConn)
    Exec ["skmdbmgr", "-karaoke"] Wait
    Last.Enabled = False
    
  Else
    
    Message.Error("\nLa ruta especificada de Karaokes no existe, se ha movido o eliminado.\nEspecifique una nueva ruta.")
    
  Endif
  
End


Private Function getConfigData_Read() As Result

  Dim hResult As Result
  
  hResult = hConn.Exec("select * from config_data where id=1")
  
  Return hResult

End

Private Sub getConfigData_Write(Value As Result)

  Debug "Read Only " & Value

End

Private Function MoneyValue_Read() As Integer

  Dim hResult As Result
  
  hResult = hConn.Exec("select MoneyValue from config_data where id=1")
  Return hResult["MoneyValue"]

End

Private Sub MoneyValue_Write(Value As Integer)

  hConn.Exec("update config_data set MoneyValue=" & Value & " where id=1")

End

Private Function CreditValue_Read() As Integer

  Dim hResult As Result
  
  hResult = hConn.Exec("select CreditValue from config_data where id=1")
  Return hResult["CreditValue"]

End

Private Sub CreditValue_Write(Value As Integer)

  hConn.Exec("update config_data set CreditValue=" & Value & " where id=1")

End

Private Function MasterVol_Read() As Integer

  Dim hResult As Result
  
  hResult = hConn.Exec("select MasterVol from config_data where id=1")
  Return hResult["MasterVol"]

End

Private Sub MasterVol_Write(Value As Integer)

  hConn.Exec("update config_data set MasterVol=" & Value & " where id=1")

End

Private Function FullScreen_Read() As Boolean

  Dim hResult As Result
  
  hResult = hConn.Exec("select FullScreen from config_data where id=1")
  Return hResult["FullScreen"]

End

Private Sub FullScreen_Write(Value As Boolean)

  hConn.Exec("update config_data set FullScreen=" & Value & " where id=1")

End

Private Function ShowCursor_Read() As Boolean

  Dim hResult As Result
  
  hResult = hConn.Exec("select ShowCursor from config_data where id=1")
  Return hResult["ShowCursor"]

End

Private Sub ShowCursor_Write(Value As Boolean)

  hConn.Exec("update config_data set ShowCursor=" & Value & " where id=1")

End

Private Function ScreenSaver_Read() As Boolean

  Dim hResult As Result
  
  hResult = hConn.Exec("select ScreenSaver from config_data where id=1")
  Return hResult["ScreenSaver"]

End

Private Sub ScreenSaver_Write(Value As Boolean)

  hConn.Exec("update config_data set ScreenSaver=" & Value & " where id=1")

End

Private Function VideoOut_Read() As Boolean

  Dim hResult As Result
  
  hResult = hConn.Exec("select VideoOut from config_data where id=1")
  Return hResult["VideoOut"]

End

Private Sub VideoOut_Write(Value As Boolean)

  hConn.Exec("update config_data set VideoOut=" & Value & " where id=1")

End

Private Function AutoPlay_Read() As Boolean

  Dim hResult As Result
  
  hResult = hConn.Exec("select AutoPlay from config_data where id=1")
  Return hResult["AutoPlay"]

End

Private Sub AutoPlay_Write(Value As Boolean)

  hConn.Exec("update config_data set AutoPlay=" & Value & " where id=1")

End

Private Function AutoScroll_Read() As Boolean

  Dim hResult As Result
  
  hResult = hConn.Exec("select AutoScroll from config_data where id=1")
  Return hResult["AutoScroll"]

End

Private Sub AutoScroll_Write(Value As Boolean)

  hConn.Exec("update config_data set AutoScroll=" & Value & " where id=1")

End

Private Function MaxCreditKey_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select MaxCreditKey from config_data where id=1")
  Return hResult["MaxCreditKey"]

End

Private Sub MaxCreditKey_Write(Value As String)

  hConn.Exec("update config_data set MaxCreditKey=" & Value & " where id=1")

End

Private Function MinCreditKey_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select MinCreditKey from config_data where id=1")
  Return hResult["MinCreditKey"]

End

Private Sub MinCreditKey_Write(Value As String)

  hConn.Exec("update config_data set MinCreditKey=" & Value & " where id=1")

End

Private Function ConfigKey_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select ConfigKey from config_data where id=1")
  Return hResult["ConfigKey"]

End

Private Sub ConfigKey_Write(Value As String)

  hConn.Exec("update config_data set ConfigKey=" & Value & " where id=1")

End

Private Function CancelKey_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select CancelKey from config_data where id=1")
  Return hResult["CancelKey"]

End

Private Sub CancelKey_Write(Value As String)

  hConn.Exec("update config_data set CancelKey=" & Value & " where id=1")

End

Private Function MaxVolKey_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select MaxVolKey from config_data where id=1")
  Return hResult["MaxVolKey"]

End

Private Sub MaxVolKey_Write(Value As String)

  hConn.Exec("update config_data set MaxVolKey=" & Value & " where id=1")

End

Private Function MinVolKey_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select MinVolKey from config_data where id=1")
  Return hResult["MinVolKey"]

End

Private Sub MinVolKey_Write(Value As String)

  hConn.Exec("update config_data set MinVolKey=" & Value & " where id=1")

End

Private Function MusicDir_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select MusicDir from config_data where id=1")
  Return hResult["MusicDir"]

End

Private Sub MusicDir_Write(Value As String)

  hConn.Exec("update config_data set MusicDir=" & Value & " where id=1")

End

Private Function VideoDir_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select VideoDir from config_data where id=1")
  Return hResult["VideoDir"]

End

Private Sub VideoDir_Write(Value As String)

  hConn.Exec("update config_data set VideoDir=" & Value & " where id=1")

End

Private Function KaraokeDir_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select KaraokeDir from config_data where id=1")
  Return hResult["KaraokeDir"]

End

Private Sub KaraokeDir_Write(Value As String)

  hConn.Exec("update config_data set KaraokeDir=" & Value & " where id=1")

End

Private Function Total_credito_Read() As Integer

  Dim hResult As Result
  
  hResult = hConn.Exec("select Total_credito from monedero where id=1")
  Return hResult["Total_credito"]

End

Private Sub Total_credito_Write(Value As Integer)

  hConn.Exec("update monedero set Total_credito=" & Value & " where id=1")

End

Private Function Credito_Read() As Integer

  Dim hResult As Result
  
  hResult = hConn.Exec("select Credito from monedero where id=1")
  Return hResult["Credito"]

End

Private Sub Credito_Write(Value As Integer)

  hConn.Exec("update monedero set Credito=" & Value & " where id=1")

End

Private Function channels_Read() As Integer[]

  Dim hResult As Result, ch As New Integer[], i As Integer
  hResult = hConn.Exec("select * from EQ_data where id=1")
  For i = 1 To 10
    ch.Push(hResult[i & "ch"])
  Next
  Return ch

End

Private Sub channels_Write(Value As Integer[])

  Dim i As Integer
  
  For i = 1 To 10
    hConn.Exec("update EQ_data set " & i & "ch=" & Value[i - 1] & " where id=1")
  Next

End

Public Sub getDataAlbums(Contador As Short) As Result ''Devuelve 10 busquedas

  Dim hResult As Result
  
  Select Modo
    Case "Musica"
      hResult = hConn.Exec("select * from album_id where id=" & contador & " limit 10")
    Case "Video"
      hResult = hConn.EXEC("select * from video_album_id where id=" & contador & " limit 10")
    Case "Karaoke"
      hResult = hConn.EXEC("select * from karaoke_album_id where id=" & contador & " limit 10")
    'Case "MasTocado"
    'Case "Nuevos"
  End Select
  Return hResult

End

Public Sub getDataAlbum(Contador As Short) As Result ''Devueve 1 busqueda
  
  Dim hResult As Result
  Select Modo
    Case "Musica"
      hResult = hConn.Exec("select * from album_id where id=" & contador)
    Case "Video"
      hResult = hConn.EXEC("select * from video_album_id where id=" & contador)
    Case "Karaoke"
      hResult = hConn.EXEC("select * from karaoke_album_id where id=" & contador)
    'Case "MasTocado"
    'Case "Nuevos"
  End Select
  Return hResult
  
End

Public Sub getDataSongs(Contador As Short) As Result
  
  Dim hResult As Result
  Select Modo
    Case "Musica"
      hResult = hConn.Exec("select * from mp3 where id=" & contador)
    Case "Video"
      hResult = hConn.EXEC("select * from video where id=" & contador)
    Case "Karaoke"
      hResult = hConn.EXEC("select * from karaoke where id=" & contador)
    'Case "MasTocado"
    'Case "Nuevos"
  End Select
  Return hResult
  
End

Public Sub getAllPlaylist() As Integer '' Retorna la longitud de la cola de reproducción.
  
  Dim hResult As Result
  
  hResult = hConn.Exec("select * from playlist")
  Return hResult.Length
  
End

Private Function DBPlayList_Read() As Song

  Dim hResult As Result, sData As New Song
'   
  hResult = hConn.Exec("select * from playlist")
  hResult.MoveFirst
  
  If hResult.Length > 0 Then
    With sData
      .album = hResult["Album"]
      .name = hResult["Nombre"]
      .genere = hResult["Genero"]
      .type = hResult["Tipo"]
      .cover = hResult["Cover"]
    End With
  Endif
  
  Return sData

End

Private Sub DBPlayList_Write(sData As Song)

  Dim hResult As Result
  
  hResult = hConn.Exec("select max(id) from playlist")
  If hResult["max(id)"] = Null Then
    hConn.Exec("insert into playlist values (&1,&2,&3,&4,&5,&6,&7)", 1, Null, sData.album, sData.name, sData.genere, sData.type, sData.cover)
  Else
    hConn.Exec("insert into playlist values (&1,&2,&3,&4,&5,&6,&7)", hResult["max(id)"] + 1, Null, sData.album, sData.name, sData.genere, sData.type, sData.cover)
  Endif

End

Public Sub getWorkDir() As String
  
  Dim WorkDir As String
  Select Modo
    Case "Musica"
      WorkDir = MusicDir_Read()
    Case "Video"
      WorkDir = VideoDir_Read()
    Case "Karaoke"
      WorkDir = KaraokeDir_Read()
  End Select
  Return WorkDir
  
End

Public Sub DelFirstItemPL() ''Elimina la primera entrada en la DB playlist
  
  Dim hResult As Result
'   
  hResult = hConn.Exec("select * from playlist")
  hResult.MoveFirst
  Try hConn.Exec("delete from playlist where id=" & hResult["id"])
  
End

Private Function Skm_Modo_Read() As String

  Return Modo

End

Private Sub Skm_Modo_Write(Value As String)

  Modo = Value

End

Private Sub LoadTotalAlbum()
  
  Dim hResult As Result
  
  Select Case Modo
    Case "Musica"
      hResult = hConn.Exec("select id from album_id")
    Case "Video"
      hResult = hConn.Exec("select id from video_album_id")
    Case "Karaoke"
      hResult = hConn.Exec("select id from karaoke_album_id")
  End Select
  Total_Album = hResult.Count + 1
  
End

Public Sub getTotalAlbums() As Integer

  LoadTotalAlbum
  Return Total_Album
  
End

Public Sub setPlayHistory(Value As Integer)

  Dim hResult As Result, i As Integer, nModo As String
  
  Select Modo
    Case "Musica"
      nModo = "mp3"
    Case "Video"
      nModo = "video"
    Case "Karaoke"
      nModo = "karaoke"
  End Select

  hResult = hConn.Exec("select * from " & nModo & "playhistory where id=" & Value)
  If hResult.Available = False Then
    hConn.Exec("insert into " & nModo & "playhistory values (&1,&2)", Value, 1)
  Else
    i = hResult["Contador"]
    Inc i
    hConn.Exec("update " & nModo & "playhistory set Contador=" & i & " where id=" & Value)
  Endif

End

Private Function SkinTheme_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select Theme from config_data where id=1")
  Return hResult["Theme"]

End

Private Sub SkinTheme_Write(Value As String)

  hConn.Exec("update config_data set Theme=" & Value & " where id=1")

End

Private Function SkinPath_Read() As String
  
  Dim path As String
  path = User.Home &/ "Skins/"
  Return path
  
End

Private Sub SkinPath_Write(Value As String)
  
  Debug "Read only"
  
End

Private Function FTPHost_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select FtpHost from config_data where id=1")
  Return hResult["FtpHost"]

End

Private Sub FTPHost_Write(Value As String)

  hConn.Exec("update config_data set FtpHost=" & Value & " where id=1")

End

Private Function FTPUser_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select FtpUser from config_data where id=1")
  Return hResult["FtpUser"]

End

Private Sub FTPUser_Write(Value As String)

  hConn.Exec("update config_data set FtpUser=" & Value & " where id=1")

End

Private Function FTPPassword_Read() As String

  Dim hResult As Result
  
  hResult = hConn.Exec("select FtpPassword from config_data where id=1")
  
  Return sEncrypt.TextOfuscate(hResult["FtpPassword"], False, "")

End

Private Sub FTPPassword_Write(Value As String)

  hConn.Exec("update config_data set FtpPassword=" & sEncrypt.TextOfuscate(Value, True, "") & " where id=1")

End
